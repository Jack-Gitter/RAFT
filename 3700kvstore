#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os, random, math

BROADCAST = "FFFF"

class Replica:
    def __init__(self, port, id, others):
        self.port = port # Port number for this replica
        self.id = id # ID number for this replica
        self.others = others # Array of other replica IDs
        self.leader_id = "FFFF" # Initial leader ID set to unknown
        self.follower = True # Initial follower state set to true
        self.leader = False # Initial leader state set to false
        self.candidate = False # Initial candidate state set to false
        self.election_timeout = random.uniform(.150, .300) # Initial random election timeout value
        self.term = 1 # Terms start at 1

        self.log = {} # Log storing values from string -> string which are the msg['key'] and msg['value'] respectively
        self.state_machine = {} # State machine where logs messages are commited
        self.rpc_responses = {} # Number of append entry rpc responses a leader has received for a given message

        self.votes = [] # votes received during a given election round
        self.voted_for = None # Boolean to determine if this replica has voted for someone in the current round
        self.currtime = 0 # the current time until experiation of the election timeout

        # Intialize socket
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    # Method to send messages to other replicas or clients
    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    # Method to send append entry rpcs to other replicas
    def send_append_entry_rpc(self, msg):
        response = {"src": str(self.id), "dst": BROADCAST, "leader": str(self.leader_id),
                "type": "append_entry_rpc", "MID": msg['MID'], "key": msg['key'], "value": msg['value'], 
                "client": msg['src']}
        self.send(response)

    # Respond to put messages
    def respond_to_put(self, msg):
        # If we are the leader, then put this entry in our log and send append entry rpc message
        if self.leader:
            self.send_append_entry_rpc(msg)
            self.log[msg['key']] = msg['value']
            self.rpc_responses[msg['key']] = 1;

        # If we are not the leader, send a redirect message
        if self.leader_id != self.id:
            response = {"src": str(self.id), "dst": msg['src'], "leader": self.leader_id, "type": "redirect", "MID": msg['MID']} 
            self.send(response)

    # Respond to get messages 
    def respond_to_get(self, msg):
        response = {}
        # If we are not the leader, redirect
        if self.leader_id != self.id:
            response = {"src": str(self.id), "dst": msg['src'], "leader": self.leader_id, "type": "redirect", "MID": msg['MID']} 
        # If we are the leader, retrieve the message from our state machine
        else:
            value = self.state_machine[msg['key']]
            response = {"src": str(self.id), "dst": msg['src'], "leader": str(self.id), "type": "ok", "MID": msg['MID'], "value": str(value)}
        self.send(response)

    # Method to start a new election and set booleans accordingly
    def begin_election(self):
        self.term+=1
        self.voted_for = None
        self.candidate = True
        self.follower = False
        self.leader = False

    # Method to send request vote rpc's to other replicas when election timeout has expried
    def send_request_vote_RPC(self):
        request_vote_rpc = {"src": str(self.id),
                "dst": BROADCAST,
                "leader": self.leader_id,
                'type': 'request_vote_rpc',
                'MID': '1',
                "last_log_idx": str(len(self.log)-1),
                "term":self.term}
            
        # Check to see if we have voted for anyone in the current term
        if self.voted_for == None:
            self.voted_for = self.id
            self_vote = {"vote_granted": True}
            self.votes.append(self_vote)

        self.send(request_vote_rpc)
            
    # Send a "heartbeat" message to the other replicas so that they know not to start a new election
    def send_heartbeat(self):
        self.currtime = time.time()
        self.votes = []
        heartbeat = {"src": str(self.id), "dst": BROADCAST, "leader": str(self.id), "type": "heartbeat", "term": self.term, "MID": '-1'}
        self.send(heartbeat)

    # Analyze votes that come in from request_vote_rpcs
    def analyze_votes(self):
        count = 0
        for vote in self.votes:
            if vote['vote_granted'] == True:
                count+=1
        if count > math.ceil(len(self.others)/2):
            self.leader = True
            self.candidate = False
            self.follower = False
            self.voted_for = None
            self.leader_id = self.id
            self.send_heartbeat()

    # Respond to vote reqeuests
    def respond_to_vote_request(self, msg):
        vote_response = False

        if msg['term'] >= self.term and self.voted_for == None:
            vote_response = True
            
        response = {"src": str(self.id), "dst": msg['src'], "leader": self.leader_id, "MID":"1", "type": "vote_response", "vote_granted": vote_response}
        self.voted_for = msg['src']
        self.send(response)

    # For replicas, make sure to reset the election timeout and set themselves to followers if they receive a heartbeat message
    def handle_heartbeat(self, msg):
        if msg['term'] >= self.term:
            self.election_timeout = random.uniform(.150, .300)
            self.votes = []
            self.term = msg['term']
            self.follower = True
            self.leader = False
            self.candidate = False
            self.voted_for = None
            self.leader_id = msg['leader']
            self.currtime = time.time()

    # This is for anyone in candidate state, handling vote responses from request_vote_rpcs
    def handle_vote_response(self, msg):
        self.votes.append(msg)
        self.analyze_votes()

    # Replicate log message sent by leader in a append_entry_rpc
    def replicate_log(self, msg):
        self.log[msg['key']] = msg['value']
        response = {"src": str(self.id), "dst": self.leader_id, "leader": self.leader_id, "MID":msg['MID'], 
                "type": "append_entry_rpc_response", "key": msg['key'], "value": msg['value'], "client": msg['client']}
        self.send(response)

    # Attemp to commit a log message to the state machine (for leader) by checking if a quorum has been reached
    def try_to_commit(self, msg):
        self.rpc_responses[msg['key']] += 1
        
        if self.rpc_responses[msg['key']] == int(len(self.others)/2)+1:
            follower_message = {"src": str(self.id), 'dst': BROADCAST, "leader": str(self.id), "MID": msg['MID'],
                    "type": "commit_entry", "key": msg['key'], "value": msg['value']}
            self.state_machine[msg['key']] = msg['value']
            response = {"src": str(self.id), "dst": msg['client'], "leader": str(self.id), "type": "ok", "MID": msg['MID']}
            self.send(response)
            self.send(follower_message);

    # Commit an entry to the state machine (for followers)
    def commit_entry(self, msg):
        self.state_machine[msg['key']] = msg['value']

    # Main running loop
    def run(self):
        # Initialize currtime so that election timeouts don't occur right away
        self.currtime = time.time()
        while True:
            socks = []
            # If we are the leader, then set the timeout quicker than the election timeout so that we can send heartbeats
            if self.leader:
                socks = select.select([self.socket], [], [], .1)[0]
            # Otherwise set timeout to random interval 
            else:
                socks = select.select([self.socket], [], [], self.election_timeout)[0]

            # For each message receieved handle accordingly
            for sock in socks:
                data, addr = sock.recvfrom(65535) 
                msg = data.decode('utf-8')
                msg = json.loads(msg)

                print("Received message '%s'" % (msg,), flush=True)

                if msg['type'] == 'heartbeat':
                    self.handle_heartbeat(msg)
                elif msg['type'] == 'get':
                    self.respond_to_get(msg)
                elif msg['type'] == 'append_entry_rpc' and not self.leader:
                    self.replicate_log(msg)
                elif msg['type'] == 'append_entry_rpc_response' and self.leader:
                    self.try_to_commit(msg)
                elif msg['type'] == 'put':
                    self.respond_to_put(msg)
                elif msg['type'] == 'request_vote_rpc':
                    self.respond_to_vote_request(msg)
                elif msg['type'] == 'vote_response' and self.candidate:
                    self.handle_vote_response(msg)
                elif msg['type'] == 'commit_entry' and not self.leader:
                    self.commit_entry(msg)


            # If we are the leader
            if self.leader:
                # reset the election timeout 
                self.election_timeout = random.uniform(.150,.300)
                # if we can send a new heartbeat, send
                if time.time() - self.currtime >= .1:
                    self.send_heartbeat()
            # if we are not the leader and election timeout has expired start a new election process
            elif len(socks) == 0 or time.time() - self.currtime >= self.election_timeout:
                self.begin_election()
                self.send_request_vote_RPC()
                self.election_timeout = random.uniform(.150, .300)
                self.currtime = time.time()
                
                


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()

