#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os, random, math

BROADCAST = "FFFF"

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        self.leader_id = "FFFF"
        self.follower = True
        self.leader = False
        self.candidate = False
        self.election_timeout = random.uniform(.150, .300)
        self.term = 1

        self.log = {}
        self.state_machine = {}
        self.rpc_responses = {} # from msg['key'] -> number of responses

        self.votes = []
        self.voted_for = None
        self.currtime = 0

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    def send_append_entry_rpc(self, msg):
        response = {"src": str(self.id), "dst": BROADCAST, "leader": str(self.leader_id), "type": "append_entry_rpc", "MID": msg['MID'], "key": msg['key'], "value": msg['value'], 
                "client": msg['src']}
        self.send(response)

    # Need to send append entry RPC's to other replicas here
    def respond_to_put(self, msg):
        if self.leader:
            if msg['key'] not in self.rpc_responses or self.rpc_responses[msg['key']] > 1:
                self.send_append_entry_rpc(msg)
            self.log[msg['key']] = msg['value']
            self.rpc_responses[msg['key']] = 1;

        #response = {}

        if self.leader_id != self.id:
            response = {"src": str(self.id), "dst": msg['src'], "leader": self.leader_id, "type": "redirect", "MID": msg['MID']} 
            self.send(response)
        #else:
        #    response = {"src": str(self.id), "dst": msg['src'], "leader": str(self.id), "type": "ok", "MID": msg['MID']}


        # Send append_entry_rpc to replicas so they can update their logs

    def respond_to_get(self, msg):
        response = {}
        if self.leader_id != self.id:
            response = {"src": str(self.id), "dst": msg['src'], "leader": self.leader_id, "type": "redirect", "MID": msg['MID']} 
        else:
            value = self.state_machine[msg['key']]
            response = {"src": str(self.id), "dst": msg['src'], "leader": str(self.id), "type": "ok", "MID": msg['MID'], "value": str(value)}
        self.send(response)

    def begin_election(self):
        print("starting new election -------------------------------", flush=True)
        self.term+=1
        self.voted_for = None
        self.candidate = True
        self.follower = False
        self.leader = False

    def send_request_vote_RPC(self):
        request_vote_rpc = {"src": str(self.id),
                "dst": BROADCAST,
                "leader": self.leader_id,
                'type': 'request_vote_rpc',
                'MID': '1',
                "last_log_idx": str(len(self.log)-1),
                "term":self.term}
            
        if self.voted_for == None:
            self.voted_for = self.id
            self_vote = {"vote_granted": True}
            self.votes.append(self_vote)

        print("sending vote request '%s'" % (request_vote_rpc,), flush=True)
        self.send(request_vote_rpc)
            
    def send_heartbeat(self):
        self.currtime = time.time()
        self.votes = []
        heartbeat = {"src": str(self.id), "dst": BROADCAST, "leader": str(self.id), "type": "heartbeat", "term": self.term, "MID": '-1'}
        print("sending heartbeat message", flush=True)
        self.send(heartbeat)

    def analyze_votes(self):
        count = 0
        for vote in self.votes:
            if vote['vote_granted'] == True:
                count+=1
        if count > math.ceil(len(self.others)/2):
            self.leader = True
            self.candidate = False
            self.follower = False
            self.voted_for = None
            self.leader_id = self.id
            print("I Am the leader!!!", flush=True)
            self.send_heartbeat()

    def respond_to_vote_request(self, msg):
        vote_response = False

        if msg['term'] >= self.term and self.voted_for == None:
            vote_response = True
            
        response = {"src": str(self.id), "dst": msg['src'], "leader": self.leader_id, "MID":"1", "type": "vote_response", "vote_granted": vote_response}
        self.voted_for = msg['src']
        print("sending vote response '%s'" % (response,), flush=True)
        self.send(response)

    def handle_heartbeat(self, msg):
        if msg['term'] >= self.term:
            self.election_timeout = random.uniform(.150, .300)
            self.votes = []
            self.term = msg['term']
            self.follower = True
            self.leader = False
            self.candidate = False
            self.voted_for = None
            self.leader_id = msg['leader']
            self.currtime = time.time()

    # this is only working because we don't need to do another election, the if statement will never pass if leader fails and new election needs to happen
    def handle_vote_response(self, msg):
        self.votes.append(msg)
        self.analyze_votes()

    def replicate_log(self, msg):
        print("attempting to replicate log with MID number: " + str(msg['MID']), flush=True)
        self.log[msg['key']] = msg['value']
        response = {"src": str(self.id), "dst": self.leader_id, "leader": self.leader_id, "MID":msg['MID'], 
                "type": "append_entry_rpc_response", "key": msg['key'], "value": msg['value'], "client": msg['client']}
        self.send(response)

    def try_to_commit(self, msg):
        #print("attempting to commit message with message MID: " + str(msg['MID']), flush=True)
        self.rpc_responses[msg['key']] += 1
        #print("the amount of responses that this key has gotten are: " + str(self.rpc_responses[msg['key']]))
        #print(str(int(len(self.others/2))), flush=True)
        #if self.rpc_responses[msg['key']] >= int(len(self.others) / 2):
        
        if self.rpc_responses[msg['key']] == int(len(self.others)/2)+1:
            follower_message = {"src": str(self.id), 'dst': BROADCAST, "leader": str(self.id), "MID": msg['MID'], "type": "commit_entry", "key": msg['key'], "value": msg['value']}
            self.state_machine[msg['key']] = msg['value']
            response = {"src": str(self.id), "dst": msg['client'], "leader": str(self.id), "type": "ok", "MID": msg['MID']}
            self.send(response)
            self.send(follower_message);

    def commit_entry(self, msg):
        self.state_machine[msg['key']] = msg['value']

    def run(self):
        self.currtime = time.time()
        while True:
            socks = []
            if self.leader:
                socks = select.select([self.socket], [], [], .1)[0]
            else:
                socks = select.select([self.socket], [], [], self.election_timeout)[0]

            for sock in socks:
                data, addr = sock.recvfrom(65535) 
                msg = data.decode('utf-8')
                msg = json.loads(msg)

                print("Received message '%s'" % (msg,), flush=True)

                if msg['type'] == 'heartbeat':
                    self.handle_heartbeat(msg)
                elif msg['type'] == 'get':
                    self.respond_to_get(msg)
                elif msg['type'] == 'append_entry_rpc' and not self.leader:
                    self.replicate_log(msg)
                elif msg['type'] == 'append_entry_rpc_response' and self.leader:
                    self.try_to_commit(msg)
                elif msg['type'] == 'put':
                    self.respond_to_put(msg)
                elif msg['type'] == 'request_vote_rpc':
                    self.respond_to_vote_request(msg)
                elif msg['type'] == 'vote_response' and self.candidate:
                    self.handle_vote_response(msg)
                elif msg['type'] == 'commit_entry' and not self.leader:
                    self.commit_entry(msg)


            if self.leader:
                self.election_timeout = random.uniform(.150,.300)
                if time.time() - self.currtime >= .1:
                    self.send_heartbeat()
            elif len(socks) == 0 or time.time() - self.currtime >= self.election_timeout:
                self.begin_election()
                self.send_request_vote_RPC()
                self.election_timeout = random.uniform(.150, .300)
                self.currtime = time.time()
                
                


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
